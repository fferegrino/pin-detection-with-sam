<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Enamel Pin Collection</title>
  <style>
body, html {
    height: 100%;
    margin: 0;
    /* overflow: hidden; */
}

.magnifier-container {
    position: relative;
    width: 100%;
    height: 100%;
}

#canvasMapContainer {
    width: 100%;
    height: auto;
    display: block;
}

#info {
    position: absolute;
    top: 0;
    left: 0;
}

#info > article {
  margin-bottom: 0;
}
  </style>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css" />
  <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/es6-promise/dist/es6-promise.auto.min.js"></script>
  <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/imagemapster/1.8.0/jquery.imagemapster.min.js" integrity="sha512-18b1YKEQCvv8P4pvvf1lFmJIYLjU6gqzz8Cw+J/Q5lFL5bf56QtK8xMLH/7Vvv+FGRxscyeP7G5pq2AgtQEyAA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
</head>
<body>

  <dialog id="modal">
    <article>
      <header>
        <p>
          <strong id="pin-name">üóìÔ∏è Thank You for Registering!</strong>
        </p>
      </header>
      <img src="#" alt="Enamel Pins Collection" id="pin-image">
    </article>
  </dialog>
  <div class="magnifier-container">
      <img src="{{image}}" alt="Enamel Pins Collection" id="canvasMapContainer" usemap="#pinmap">
  </div>
  <map name="pinmap" id="pinmap">
      {%- for cutout in existing_cutouts %}
      <area shape="poly" coords="{{cutout.polygon | join(',')}}" 
        data-name="{{cutout.name}}"
        alt="{{cutout.name}}" data-key="{{cutout.uuid}}" href="#">
      {%- endfor %}
  </map>

  <!-- Tooltip -->
  <div id="info" style="display: none;">
    <article>
      <header><h3 id="infoPinName"></h3></header>
      <p id="infoPinDescription"></p>
    </article>
  </div>

  <script>
const modal = document.getElementById("modal");

// Config
const isOpenClass = "modal-is-open";
const openingClass = "modal-is-opening";
const closingClass = "modal-is-closing";
const scrollbarWidthCssVar = "--pico-scrollbar-width";
const animationDuration = 400; // ms
const infoPinName = document.getElementById("infoPinName");
const infoPinDescription = document.getElementById("infoPinDescription");
let visibleModal = null;
const buffer = 10;

const $info = $("#info");

// Toggle modal
const toggleModal = (event) => {
  // event.preventDefault();
  const modal = document.getElementById("modal");
  if (!modal) return;
  modal && (modal.open ? closeModal(modal) : openModal(modal));
};

// Open modal
const openModal = (modal) => {
  const {
    documentElement: html
  } = document;
  html.classList.add(isOpenClass, openingClass);
  setTimeout(() => {
    visibleModal = modal;
    html.classList.remove(openingClass);
  }, animationDuration);
  modal.showModal();
};

// Close modal
const closeModal = (modal) => {
  visibleModal = null;
  const {
    documentElement: html
  } = document;
  html.classList.add(closingClass);
  setTimeout(() => {
    html.classList.remove(closingClass, isOpenClass);
    html.style.removeProperty(scrollbarWidthCssVar);
    modal.close();
  }, animationDuration);
};

// Close with a click outside
document.addEventListener("click", (event) => {
  if (visibleModal === null) return;
  const modalContent = visibleModal.querySelector("article");
  const isClickInside = modalContent.contains(event.target);
  !isClickInside && closeModal(visibleModal);
});

// Close with Esc key
document.addEventListener("keydown", (event) => {
  if (event.key === "Escape" && visibleModal) {
    closeModal(visibleModal);
  }
});

const $canvasMapContainer = $("#canvasMapContainer");

$(function() {
  $canvasMapContainer.mapster({
    enableAutoResizeSupport: true,  
    autoResize: true,
    isSelectable: false,
    stroke: false,
    strokeColor: '00FF00',
    strokeWidth: 5,
    mapKey: 'data-key',
    fillOpacity: 0.0,
    onClick: function (data) {
      console.log(data.key);
      console.log(data.options);
      console.log($(this));
      toggleModal();
    },
    onMouseout: function(data) {
      $info.hide();
    },
    onMouseover: function(data) {
      var $me = $(this)
      console.log(data.key);
      console.log(data.options);
      console.log($me);

      // Convert the coords to an array of integers
      const coords = $me[0].coords.split(',');
      const coordsInt = coords.map(coord => parseInt(coord, 10));

      // Get the bounding box of the polygon
      const x1 = Math.min(...coordsInt.filter((_, i) => i % 2 === 0));
      const y1 = Math.min(...coordsInt.filter((_, i) => i % 2 === 1));
      const x2 = Math.max(...coordsInt.filter((_, i) => i % 2 === 0));
      const y2 = Math.max(...coordsInt.filter((_, i) => i % 2 === 1));

      // Get the center of the bounding box
      const centerX = (x1 + x2) / 2;

      console.log(x1, y1, x2, y2, centerX); 


      infoPinName.textContent = data.e.target.dataset.name;

      const infoWidth = $info.width();
      const infoHeight = $info.height();

      var positionX = "centre"
      if (x1 - infoWidth - buffer < 0) {
        positionX = "left";
      } else if (x2 + infoWidth + buffer > $canvasMapContainer.width()) {
        positionX = "right";
      }

      var positionY = "top";
      if (y1 - infoHeight - buffer < window.pageYOffset) {
        positionY = "bottom";
      }

      const positionXmap = {
        "left": x2 + buffer,
        "centre": centerX - infoWidth/2,
        "right": x1 - infoWidth - buffer
      }

      const positionYmap = {
        "top": y1 - buffer - infoHeight,
        "bottom": y2 + buffer
      }
      
      $info.css({
        top: positionYmap[positionY],
        left: positionXmap[positionX],
        boxShadow: "0px 0px 84px 0px rgba(0, 0, 0, 0.80)"
        
      }).show();
    }
  }).mapster('set', true, 'all');
});
</script>
</body>
</html>
